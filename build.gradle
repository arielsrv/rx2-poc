buildscript {
    ext {
        joobyVersion = "2.16.1"
    }
}

plugins {
    id "application"
    id "io.jooby.run" version "${joobyVersion}"
    id "io.spring.dependency-management" version "1.1.0"
    id "com.google.osdetector" version "1.7.3"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.github.ben-manes.versions" version "0.45.0"
    id "io.jooby.openAPI" version "${joobyVersion}"
    id "jacoco"
}

group "app"
version "1.0.0"
mainClassName = "app.App"
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.jooby:jooby-bom:$joobyVersion"
    }
}

dependencies {
    annotationProcessor "io.jooby:jooby-apt"
    implementation "io.jooby:jooby-netty"
    implementation "ch.qos.logback:logback-classic"
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.jooby:jooby-guice:2.16.1'
    implementation 'io.jooby:jooby-jackson:2.16.1'

    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    implementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.2.1'

    implementation 'io.jooby:jooby-swagger-ui:2.16.1'
    implementation 'io.jooby:jooby-redoc:2.16.1'

    implementation group: 'com.newrelic.agent.java', name: 'newrelic-api', version: '8.2.0'

    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "io.jooby:jooby-test"
    testImplementation "com.squareup.okhttp3:okhttp"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

/** Java debug information: */
tasks.withType(JavaCompile) {
    options.compilerArgs += [
            '-parameters',
            '-Ajooby.incremental=true',
            '-Ajooby.services=true',
            '-Ajooby.debug=false'
    ]
    options.debug = true
}

shadowJar {
    mergeServiceFiles()
}

// Run openAPI task on joobyRun
joobyRun.dependsOn openAPI

// Run openAPI task on build
jar.dependsOn openAPI

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

jar {
    enabled = false
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport { // ./gradlew test jacocoTestReport from CLI
    dependsOn test // tests are required to run before generating the report
    group = "Reporting"
    reports {
        xml.enabled true // needed for coverage
        csv.enabled true
        html.destination file("${buildDir}/reports/coverage")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/app/App.*',
            ])
        }))
    }
}
